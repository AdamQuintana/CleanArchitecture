@page "/fetchdata_grpc"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using CleanArchitecture.Application.WeatherForecasts
@using GrpcClient = CleanArchitecture.Application.WeatherForecasts.Service.ServiceClient
@inject GrpcChannel Channel

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<WeatherForecastDto> forecasts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = new GrpcClient(Channel);
            var response = await client.GetWeatherForecastsAsync(new Empty());
            forecasts = response.WeatherForecastDtos;
        }
        catch (RpcException ex) when (ex.Status.DebugException is AccessTokenNotAvailableException tokenEx)
        {
            tokenEx.Redirect();
        }
        catch (RpcException ex)
        {
            Console.WriteLine($"{ex}");
        }
    }

}
